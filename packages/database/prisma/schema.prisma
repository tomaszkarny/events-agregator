generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventStatus {
  DRAFT
  ACTIVE
  EXPIRED
  ARCHIVED
}

enum PriceType {
  FREE
  PAID
  DONATION
}

enum EventCategory {
  WARSZTATY
  SPEKTAKLE
  SPORT
  EDUKACJA
  INNE
}

enum UserRole {
  USER
  ORGANIZER
  ADMIN
  MODERATOR
}

enum SubscriptionTier {
  FREE
  PRO
}

enum AlertFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
}

enum AlertChannel {
  PUSH
  EMAIL
  IN_APP
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  name             String?
  avatarUrl        String?
  role             UserRole         @default(USER)
  subscriptionTier SubscriptionTier @default(FREE)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  lastLoginAt      DateTime?

  // Relations
  childProfiles ChildProfile[]
  alerts        Alert[]
  subscription  Subscription?
  events        Event[]        @relation("OrganizerEvents")
  favoriteEvents Event[]       @relation("UserFavorites")

  @@index([email])
  @@index([role])
}

model ChildProfile {
  id        String   @id @default(uuid())
  userId    String
  name      String
  age       Int
  interests String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Event {
  id           String        @id @default(uuid())
  title        String
  description  String
  ageMin       Int
  ageMax       Int
  priceType    PriceType
  price        Decimal?      @db.Decimal(10, 2)
  currency     String        @default("PLN")
  
  // Location
  locationName String
  address      String
  lat          Decimal       @db.Decimal(10, 7)
  lng          Decimal       @db.Decimal(10, 7)
  city         String
  postalCode   String?
  
  // Organizer
  organizerName String
  organizerId   String?
  
  // Source
  sourceUrl    String
  sourceHash   String?       @unique
  sourceId     String?
  sourceName   String?
  
  // Media
  imageUrls    String[]
  
  // Dates
  startDate    DateTime
  endDate      DateTime?
  
  // Metadata
  category     EventCategory
  tags         String[]
  status       EventStatus   @default(ACTIVE)
  viewCount    Int           @default(0)
  clickCount   Int           @default(0)
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relations
  organizer    User?         @relation("OrganizerEvents", fields: [organizerId], references: [id])
  favoritedBy  User[]        @relation("UserFavorites")

  @@index([status, startDate])
  @@index([city, status])
  @@index([category, status])
  @@index([sourceHash])
  @@index([startDate])
  @@index([organizerId])
}

model Alert {
  id              String         @id @default(uuid())
  userId          String
  name            String
  
  // Filters stored as JSON
  filters         Json
  
  frequency       AlertFrequency
  channels        AlertChannel[]
  isActive        Boolean        @default(true)
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  lastTriggeredAt DateTime?
  
  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
}

model Subscription {
  id                    String    @id @default(uuid())
  userId                String    @unique
  stripeCustomerId      String    @unique
  stripeSubscriptionId  String    @unique
  status                String
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  canceledAt            DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}